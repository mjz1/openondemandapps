#!/usr/bin/env bash

# Load the required environment
setup_env () {
  module purge
  module load singularity/3.7.1
}
setup_env

#
# Start RStudio Server
#

# Export path to library packages
export R_LIBS_USER="<%= context.r_packages %>"

# PAM auth helper used by RStudio
export RSTUDIO_AUTH="${PWD}/bin/auth"



# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="${PWD}/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "${RSESSION_WRAPPER_FILE}" << EOL
  #!/usr/bin/env bash

  echo 'slurm:x:300:300::/opt/slurm/slurm:/bin/false' >> /etc/passwd
  # We fix the path and remove all the junk I had
  export PATH=/usr/lib/rstudio-server/bin/:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$HOME/.local/host/bin:$PATH

  export XDG_CACHE_HOME="/home/zatzmanm/work/.cache/"

  # Log all output from this script
  export RSESSION_LOG_FILE="${PWD}/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user "${R_LIBS_USER}" "\${@}"
EOL
)
chmod 700 "${RSESSION_WRAPPER_FILE}"

# Set working directory to home directory
cd "${HOME}"

# Output debug info
# module list

# echo old TMPDIR $TMPDIR
export TMPDIR=`mktemp -d`
# echo new TMPDIR $TMPDIR

mkdir -p $TMPDIR/{run,var-lib-rstudio-server,local-share-rstudio,usr}

# fix rstudio active session error on start
find /home/zatzmanm/work/.rstudio/sessions/active/*/session-persistent-state -type f -exec sed -i '{}' -e 's/abend="1"/abend="0"/' {} \;

set -x
# Launch the RStudio Server
echo "Starting up rserver..."

export RSTUDIO_USER="${USER}"

singularity exec -B "$TMPDIR:/tmp" \
 -B "$TMPDIR/run:/run" \
 -B "$TMPDIR/var-lib-rstudio-server:/var/lib/rstudio-server" \
 -B "$TMPDIR/local-share-rstudio:/home/rstudio/.local/share/rstudio" \
 -B "/data1:/data1" \
 -B "/run/munge/,/etc/slurm/,/usr/lib64/slurm,/usr/lib64/libmunge.so.2" \
 -B "/home/zatzmanm:/home/zatzmanm" \
 "<%= context.rstudio_image %>" rserver \
 --server-user="${RSTUDIO_USER}" \
 --www-port="${port}" \
 --auth-none=0 \
 --auth-pam-require-password-prompt=0 \
 --auth-pam-helper-path="${RSTUDIO_AUTH}" \
 --auth-encrypt-password=0 \
 --auth-timeout-minutes=600 \
 --rsession-path="${RSESSION_WRAPPER_FILE}"

# note, rserver in the container will start with the user space environment defined on host
# BUT, the rsession starts on limited environment, only related to R = no SLURM*, http*, ...
# so anything we want to pass to rsession needs to be set in $RSESSION_WRAPPER_FILE
